<%####################################################################### %>
<%# Copyright (c) 2014 ENEO TecnologÃ­a S.L. %>
<%# This file is part of redBorder. %>
<%# redBorder is free software: you can redistribute it and/or modify %>
<%# it under the terms of the GNU Affero General Public License License as published by %>
<%# the Free Software Foundation, either version 3 of the License, or %>
<%# (at your option) any later version. %>
<%# redBorder is distributed in the hope that it will be useful, %>
<%# but WITHOUT ANY WARRANTY; without even the implied warranty of %>
<%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the %>
<%# GNU Affero General Public License License for more details. %>
<%# You should have received a copy of the GNU Affero General Public License License %>
<%# along with redBorder. If not, see <http://www.gnu.org/licenses/>. %>
<%####################################################################### %>
#!/bin/bash

DEBUG=0

v_snort_segments=""
v_snort_all_interfaces=1

global_ret=0

if [ $DEBUG -eq 1 ]; then	
    set -x 
    exec 2>&1 
fi

if [ -f /etc/rb_sysconf.conf ]; then
    source /etc/rb_sysconf.conf
else
    exit 0
fi

f_log() {
    logger -t "watchdog_020-check-snort" "$1"
}

f_cmd() {
    eval "$@" | while read line; do
        f_log "$line"
    done
}

f_get_config_value() {
    local config_file=$1
    local key=$2
    local value=""
    if [ -f ${config_file} ]; then
        value=$(cat ${config_file} ${config_file}_local 2>/dev/null | grep "^${key}=" | tail -n 1 | awk -F = '{print $2}' | sed 's/"//g')
    fi

    echo "${value}"
}

f_get_pid_value() {

    local pid=$1
    local key=$2
    local value=""
    if [ -e /proc/${pid}/environ ]; then
        value=$(cat /proc/${pid}/environ 2>/dev/null | tr '\0' '\n' | grep "^${key}=" | sed 's/^[^=]*=\(.*\)$/\1/' | sed 's/"//g')
    fi

    echo "${value}"
}

f_segment_is_in_bypass() {
    local segment=$1
    ret=1
    /usr/lib/redborder/bin/rb_bypass.sh -b ${segment} -g | grep -qi "The interface is in the Bypass mode"
    if [ $? -eq 0 ]; then
        ret=0
    else
        ret=1
    fi
	return $ret
}

f_set_bypass_segment() {
    #################################
    # Table of states
    #
    # mode        | bypass | bridge |
    # ------------------------------|
    # IPS         | on     | up     |
    # IDS         | on     | up     |
    # ------------------------------|
    #
    #################################
    ifbr=$1
    bpbr_mode="on"
    br_mode="up"

    echo "${ifbr}" | egrep -q "^bpbr[0-9]*$"
    if [ $? -eq 0 ]; then
        # interface type bypass bridge
        /usr/lib/redborder/bin/rb_bypass.sh -b ${ifbr} -s on &>/dev/null
    fi
    ip l set ${br_mode} ${ifbr}
}


f_check_snort() {
    local ret=0
    local ss NUMINSTANCES NUMPIDS

    if [ -f /var/lock/snort.lck ]; then
        # watchdog must be patient
        ret=0
    else
        /etc/init.d/snortd status &>/dev/null
        if [ $? -eq 3 ]; then
            # service snortd stopped successfully
            ret=0
        else
            NUMINSTANCES=0
            # loop over snort configs and check number of instances
            for ss in $(ls /etc/sysconfig/snort-[0-9]* 2>/dev/null| grep -v local$); do
                CPU_LIST=$(f_get_config_value ${ss} 'CPU_LIST')
                NUMINSTANCES=$((${NUMINSTANCES}+$(echo ${CPU_LIST} | tr ',' '\n' | wc -l)))
            done
            NUMPIDS=0
            for ss in $(pidof snort); do
                strings /proc/$ss/environ |grep -q CPU_LIST
                [ $? -eq 0 ] && NUMPIDS=$(( $NUMPIDS + 1 ))
            done
            if [ "x${NUMPIDS}" != "x${NUMINSTANCES}" ]; then
                ret=100
            else
                ret=0
            fi
        fi
    fi
    return $ret
}

f_test() {
    f_check_snort
}

f_restore() {
    local code=$1
    local ret=0
    local -A h_conf
    local -A h_proc
    if [ "x${code}" == "x100" ]; then
        # some snort or process or all are down!
        # we need to check if there are orphan instances groups
        for ss in $(ls /etc/sysconfig/snort-[0-9]* 2>/dev/null| grep -v local$); do
            CPU_LIST=$(f_get_config_value ${ss} 'CPU_LIST')
            NUMINSTANCES=$(echo ${CPU_LIST} | tr ',' '\n' | wc -l)
            INSTANCES_GROUP=$(f_get_config_value ${ss} 'INSTANCES_GROUP')
            h_conf[${INSTANCES_GROUP}]=$NUMINSTANCES
            # initialize h_proc
            h_proc[${INSTANCES_GROUP}]=0
        done
        for ss in $(pidof snort); do
            INSTANCES_GROUP=$(f_get_pid_value ${ss} 'INSTANCES_GROUP')
            # there is at least one snort process for this instances group
            h_proc[${INSTANCES_GROUP}]=1
        done
        # loop over instances groups and check some snort process
        for instances_group in ${!h_conf[@]}; do
            if [ ${h_proc[${instances_group}]} -eq 0 ]; then
                # this instances group is orphan ... need to set on bypass over its segments
                INSTANCES_GROUP_NAME=$(f_get_config_value /etc/sysconfig/snort-${instances_group} 'INSTANCES_GROUP_NAME')
                INTERFACES=$(f_get_config_value /etc/sysconfig/snort-${instances_group} 'INTERFACES')
                f_log "The instances group ${INSTANCES_GROUP_NAME} is orphan, need to set bypass on over its segments ${INTERFACES}"
                for segment in $(echo ${INTERFACES} | tr ',' ' '); do
                    f_log "${segment}: set bypass on"
                    f_set_bypass_segment ${segment}
                done
            fi
        done
        echo "service snortd start" | at now
    else
        # NOP for now
        :
    fi
    return $ret
}

# Get options
if [ "x$1" == "xtest" -o "x$1" == "x" ]; then
    f_test
    global_ret=$?
else
    f_restore $2
    global_ret=0
fi

exit $global_ret

## vim:ts=4:sw=4:expandtab:ai:nowrap:formatoptions=croqln:

